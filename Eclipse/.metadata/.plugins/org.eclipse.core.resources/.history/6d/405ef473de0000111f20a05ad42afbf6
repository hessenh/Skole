
public class CPU {
	private long maxCpuTime;
	private Queue cpuQueue;
	private Statistics statistics;
	
	/** The amount of memory in the memory device */
	private long memorySize;
	/** The amount of free memory in the memory device */
	private long freeMemory;
	private Process currentProccess;	
	
	public CPU(Queue cpuQueue, long maxCpuTime, Statistics statistics) {
		this.cpuQueue = cpuQueue;
		this.maxCpuTime = maxCpuTime;
		this.statistics = statistics;
	}

	public void timePassed(long timePassed) {
		statistics.cpuQueueLengthTime += cpuQueue.getQueueLength()*timePassed;
		if (cpuQueue.getQueueLength() > statistics.memoryQueueLargestLength) {
			statistics.cpuQueueLargestLength = cpuQueue.getQueueLength(); 
		}
		currentProccess.giveCpuTime(maxCpuTime);
	}

	public void insertProcess(Process p) {
		cpuQueue.insert(p);
		if (currentProccess == null) {
			switchProcess();
		}
	}

	public Process getFinnishedProcess() {
		if (currentProccess.getCpuNeeded() <= 0) {
			return currentProccess;
		} else {
			return null;
		}
	}

	public void switchProcess() {
		tmp = currentProccess;
		currentProccess = (Process) cpuQueue.removeNext();
		
	}
}
